/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

'use strict';

function peg$subclass(child, parent) {
	function ctor() {
		this.constructor = child;
	}
	ctor.prototype = parent.prototype;
	child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
	this.message = message;
	this.expected = expected;
	this.found = found;
	this.location = location;
	this.name = 'SyntaxError';

	if (typeof Error.captureStackTrace === 'function') {
		Error.captureStackTrace(this, peg$SyntaxError);
	}
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
	var DESCRIBE_EXPECTATION_FNS = {
		literal: function(expectation) {
			return '"' + literalEscape(expectation.text) + '"';
		},

		class: function(expectation) {
			var escapedParts = '',
				i;

			for (i = 0; i < expectation.parts.length; i++) {
				escapedParts +=
					expectation.parts[i] instanceof Array
						? classEscape(expectation.parts[i][0]) +
						  '-' +
						  classEscape(expectation.parts[i][1])
						: classEscape(expectation.parts[i]);
			}

			return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']';
		},

		any: function(expectation) {
			return 'any character';
		},

		end: function(expectation) {
			return 'end of input';
		},

		other: function(expectation) {
			return expectation.description;
		},
	};

	function hex(ch) {
		return ch
			.charCodeAt(0)
			.toString(16)
			.toUpperCase();
	}

	function literalEscape(s) {
		return s
			.replace(/\\/g, '\\\\')
			.replace(/"/g, '\\"')
			.replace(/\0/g, '\\0')
			.replace(/\t/g, '\\t')
			.replace(/\n/g, '\\n')
			.replace(/\r/g, '\\r')
			.replace(/[\x00-\x0F]/g, function(ch) {
				return '\\x0' + hex(ch);
			})
			.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
				return '\\x' + hex(ch);
			});
	}

	function classEscape(s) {
		return s
			.replace(/\\/g, '\\\\')
			.replace(/\]/g, '\\]')
			.replace(/\^/g, '\\^')
			.replace(/-/g, '\\-')
			.replace(/\0/g, '\\0')
			.replace(/\t/g, '\\t')
			.replace(/\n/g, '\\n')
			.replace(/\r/g, '\\r')
			.replace(/[\x00-\x0F]/g, function(ch) {
				return '\\x0' + hex(ch);
			})
			.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
				return '\\x' + hex(ch);
			});
	}

	function describeExpectation(expectation) {
		return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
	}

	function describeExpected(expected) {
		var descriptions = new Array(expected.length),
			i,
			j;

		for (i = 0; i < expected.length; i++) {
			descriptions[i] = describeExpectation(expected[i]);
		}

		descriptions.sort();

		if (descriptions.length > 0) {
			for (i = 1, j = 1; i < descriptions.length; i++) {
				if (descriptions[i - 1] !== descriptions[i]) {
					descriptions[j] = descriptions[i];
					j++;
				}
			}
			descriptions.length = j;
		}

		switch (descriptions.length) {
			case 1:
				return descriptions[0];

			case 2:
				return descriptions[0] + ' or ' + descriptions[1];

			default:
				return (
					descriptions.slice(0, -1).join(', ') +
					', or ' +
					descriptions[descriptions.length - 1]
				);
		}
	}

	function describeFound(found) {
		return found ? '"' + literalEscape(found) + '"' : 'end of input';
	}

	return (
		'Expected ' +
		describeExpected(expected) +
		' but ' +
		describeFound(found) +
		' found.'
	);
};

function peg$parse(input, options) {
	options = options !== void 0 ? options : {};

	var peg$FAILED = {},
		peg$startRuleFunctions = {start: peg$parsestart},
		peg$startRuleFunction = peg$parsestart,
		peg$c0 = function(seq) {
			return {seq: seq};
		},
		peg$c1 = peg$otherExpectation('seq'),
		peg$c2 = function(query, seq) {
			return seq ? [query].concat(seq) : [query];
		},
		peg$c3 = function(header, body) {
			return Object.assign(header, body);
		},
		peg$c4 = function(command, type, options) {
			return {header: Object.assign(command, type, options)};
		},
		peg$c5 = function(command, type) {
			return {header: Object.assign(command, type)};
		},
		peg$c6 = '$',
		peg$c7 = peg$literalExpectation('$', false),
		peg$c8 = function(_queryCommand) {
			return _queryCommand;
		},
		peg$c9 = 'create',
		peg$c10 = peg$literalExpectation('create', false),
		peg$c11 = function() {
			return {command: text()};
		},
		peg$c12 = '[',
		peg$c13 = peg$literalExpectation('[', false),
		peg$c14 = ']',
		peg$c15 = peg$literalExpectation(']', false),
		peg$c16 = function(_queryType) {
			return {type: _queryType};
		},
		peg$c17 = 'flow',
		peg$c18 = peg$literalExpectation('flow', false),
		peg$c19 = 'node',
		peg$c20 = peg$literalExpectation('node', false),
		peg$c21 = 'ontology',
		peg$c22 = peg$literalExpectation('ontology', false),
		peg$c23 = peg$otherExpectation('options'),
		peg$c24 = '(',
		peg$c25 = peg$literalExpectation('(', false),
		peg$c26 = ')',
		peg$c27 = peg$literalExpectation(')', false),
		peg$c28 = function(options) {
			return {options: options};
		},
		peg$c29 = ',',
		peg$c30 = peg$literalExpectation(',', false),
		peg$c31 = function(option, options) {
			return Object.assign(option, options);
		},
		peg$c32 = function(nodeType) {
			return makeObject('type', nodeType);
		},
		peg$c33 = function(first, rest) {
			return Object.assign(first, rest);
		},
		peg$c34 = '=',
		peg$c35 = peg$literalExpectation('=', false),
		peg$c36 = function(name, value) {
			return makeObject(name, value);
		},
		peg$c37 = function(name) {
			return makeObject(name, true);
		},
		peg$c38 = '"',
		peg$c39 = peg$literalExpectation('"', false),
		peg$c40 = function(value) {
			return value;
		},
		peg$c41 = "'",
		peg$c42 = peg$literalExpectation("'", false),
		peg$c43 = 'MqttSink',
		peg$c44 = peg$literalExpectation('MqttSink', false),
		peg$c45 = 'MqttSource',
		peg$c46 = peg$literalExpectation('MqttSource', false),
		peg$c47 = 'Filter',
		peg$c48 = peg$literalExpectation('Filter', false),
		peg$c49 = 'Map',
		peg$c50 = peg$literalExpectation('Map', false),
		peg$c51 = 'Reduce',
		peg$c52 = peg$literalExpectation('Reduce', false),
		peg$c53 = 'Grouping',
		peg$c54 = peg$literalExpectation('Grouping', false),
		peg$c55 = function() {
			return text();
		},
		peg$c56 = '{',
		peg$c57 = peg$literalExpectation('{', false),
		peg$c58 = '}',
		peg$c59 = peg$literalExpectation('}', false),
		peg$c60 = function(pairs) {
			return {body: pairs};
		},
		peg$c61 = function(pair, pairs) {
			return Object.assign(pair, pairs);
		},
		peg$c62 = function(pair) {
			return pair;
		},
		peg$c63 = function(pair) {
			return pair;
		},
		peg$c64 = ':',
		peg$c65 = peg$literalExpectation(':', false),
		peg$c66 = /^[a-zA-z]/,
		peg$c67 = peg$classExpectation([['a', 'z'], ['A', 'z']], false, false),
		peg$c68 = function(letters) {
			return makeString(letters);
		},
		peg$c69 = function(first, rest) {
			return [first].concat(rest);
		},
		peg$c70 = function(last) {
			return [last];
		},
		peg$c71 = function(first, second) {
			return {type: 'tuple', value: {first: first, second: second}};
		},
		peg$c72 = function(value) {
			return {type: 'object', value: value};
		},
		peg$c73 = function(value) {
			return {type: 'array', value: value};
		},
		peg$c74 = '$ref(',
		peg$c75 = peg$literalExpectation('$ref(', false),
		peg$c76 = function(options) {
			return {type: 'ref', value: options};
		},
		peg$c77 = function(pairs) {
			return pairs;
		},
		peg$c78 = function(values) {
			return values;
		},
		peg$c79 = function(value) {
			return {type: 'number', value: value};
		},
		peg$c80 = function(value) {
			return {type: 'string', value: value};
		},
		peg$c81 = function(value) {
			return {type: 'boolean', value: value};
		},
		peg$c82 = peg$otherExpectation('string'),
		peg$c83 = '\\',
		peg$c84 = peg$literalExpectation('\\', false),
		peg$c85 = peg$anyExpectation(),
		peg$c86 = function(char) {
			return char;
		},
		peg$c87 = function(sequence) {
			return sequence;
		},
		peg$c88 = 'b',
		peg$c89 = peg$literalExpectation('b', false),
		peg$c90 = function() {
			return '\b';
		},
		peg$c91 = 'f',
		peg$c92 = peg$literalExpectation('f', false),
		peg$c93 = function() {
			return '\f';
		},
		peg$c94 = 'n',
		peg$c95 = peg$literalExpectation('n', false),
		peg$c96 = function() {
			return '\n';
		},
		peg$c97 = 'r',
		peg$c98 = peg$literalExpectation('r', false),
		peg$c99 = function() {
			return '\r';
		},
		peg$c100 = 't',
		peg$c101 = peg$literalExpectation('t', false),
		peg$c102 = function() {
			return '\t';
		},
		peg$c103 = 'v',
		peg$c104 = peg$literalExpectation('v', false),
		peg$c105 = function() {
			return '\x0B';
		},
		peg$c106 = peg$otherExpectation('number'),
		peg$c107 = /^[0-9]/,
		peg$c108 = peg$classExpectation([['0', '9']], false, false),
		peg$c109 = function(digits) {
			return makeInteger(digits);
		},
		peg$c110 = peg$otherExpectation('boolean'),
		peg$c111 = 'true',
		peg$c112 = peg$literalExpectation('true', false),
		peg$c113 = function() {
			return true;
		},
		peg$c114 = 'false',
		peg$c115 = peg$literalExpectation('false', false),
		peg$c116 = function() {
			return false;
		},
		peg$c117 = peg$otherExpectation('whitespace'),
		peg$c118 = /^[ \t\r\n]/,
		peg$c119 = peg$classExpectation([' ', '\t', '\r', '\n'], false, false),
		peg$currPos = 0,
		peg$savedPos = 0,
		peg$posDetailsCache = [{line: 1, column: 1}],
		peg$maxFailPos = 0,
		peg$maxFailExpected = [],
		peg$silentFails = 0,
		peg$result;

	if ('startRule' in options) {
		if (!(options.startRule in peg$startRuleFunctions)) {
			throw new Error(
				'Can\'t start parsing from rule "' + options.startRule + '".'
			);
		}

		peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	}

	function text() {
		return input.substring(peg$savedPos, peg$currPos);
	}

	function location() {
		return peg$computeLocation(peg$savedPos, peg$currPos);
	}

	function expected(description, location) {
		location =
			location !== void 0
				? location
				: peg$computeLocation(peg$savedPos, peg$currPos);

		throw peg$buildStructuredError(
			[peg$otherExpectation(description)],
			input.substring(peg$savedPos, peg$currPos),
			location
		);
	}

	function error(message, location) {
		location =
			location !== void 0
				? location
				: peg$computeLocation(peg$savedPos, peg$currPos);

		throw peg$buildSimpleError(message, location);
	}

	function peg$literalExpectation(text, ignoreCase) {
		return {type: 'literal', text: text, ignoreCase: ignoreCase};
	}

	function peg$classExpectation(parts, inverted, ignoreCase) {
		return {
			type: 'class',
			parts: parts,
			inverted: inverted,
			ignoreCase: ignoreCase,
		};
	}

	function peg$anyExpectation() {
		return {type: 'any'};
	}

	function peg$endExpectation() {
		return {type: 'end'};
	}

	function peg$otherExpectation(description) {
		return {type: 'other', description: description};
	}

	function peg$computePosDetails(pos) {
		var details = peg$posDetailsCache[pos],
			p;

		if (details) {
			return details;
		} else {
			p = pos - 1;
			while (!peg$posDetailsCache[p]) {
				p--;
			}

			details = peg$posDetailsCache[p];
			details = {
				line: details.line,
				column: details.column,
			};

			while (p < pos) {
				if (input.charCodeAt(p) === 10) {
					details.line++;
					details.column = 1;
				} else {
					details.column++;
				}

				p++;
			}

			peg$posDetailsCache[pos] = details;
			return details;
		}
	}

	function peg$computeLocation(startPos, endPos) {
		var startPosDetails = peg$computePosDetails(startPos),
			endPosDetails = peg$computePosDetails(endPos);

		return {
			start: {
				offset: startPos,
				line: startPosDetails.line,
				column: startPosDetails.column,
			},
			end: {
				offset: endPos,
				line: endPosDetails.line,
				column: endPosDetails.column,
			},
		};
	}

	function peg$fail(expected) {
		if (peg$currPos < peg$maxFailPos) {
			return;
		}

		if (peg$currPos > peg$maxFailPos) {
			peg$maxFailPos = peg$currPos;
			peg$maxFailExpected = [];
		}

		peg$maxFailExpected.push(expected);
	}

	function peg$buildSimpleError(message, location) {
		return new peg$SyntaxError(message, null, null, location);
	}

	function peg$buildStructuredError(expected, found, location) {
		return new peg$SyntaxError(
			peg$SyntaxError.buildMessage(expected, found),
			expected,
			found,
			location
		);
	}

	function peg$parsestart() {
		var s0, s1, s2;

		s0 = peg$currPos;
		s1 = peg$parse_();
		if (s1 !== peg$FAILED) {
			s2 = peg$parsequerySequence();
			if (s2 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c0(s2);
				s0 = s1;
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parsequerySequence() {
		var s0, s1, s2, s3;

		peg$silentFails++;
		s0 = peg$currPos;
		s1 = peg$parsequery();
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				s3 = peg$parsequerySequence();
				if (s3 === peg$FAILED) {
					s3 = null;
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c2(s1, s3);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		peg$silentFails--;
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c1);
			}
		}

		return s0;
	}

	function peg$parsequery() {
		var s0, s1, s2, s3;

		s0 = peg$currPos;
		s1 = peg$parsequeryHeader();
		if (s1 !== peg$FAILED) {
			s2 = peg$parsequeryBody();
			if (s2 === peg$FAILED) {
				s2 = null;
			}
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_();
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c3(s1, s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parsequeryHeader() {
		var s0, s1, s2, s3, s4, s5, s6;

		s0 = peg$currPos;
		s1 = peg$parsequeryCommand();
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				s3 = peg$parsequeryType();
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						s5 = peg$parsequeryOptions();
						if (s5 !== peg$FAILED) {
							s6 = peg$parse_();
							if (s6 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c4(s1, s3, s5);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			s1 = peg$parsequeryCommand();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					s3 = peg$parsequeryType();
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c5(s1, s3);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		}

		return s0;
	}

	function peg$parsequeryCommand() {
		var s0, s1, s2;

		s0 = peg$currPos;
		if (input.charCodeAt(peg$currPos) === 36) {
			s1 = peg$c6;
			peg$currPos++;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c7);
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_queryCommand();
			if (s2 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c8(s2);
				s0 = s1;
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parse_queryCommand() {
		var s0, s1;

		s0 = peg$currPos;
		if (input.substr(peg$currPos, 6) === peg$c9) {
			s1 = peg$c9;
			peg$currPos += 6;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c10);
			}
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0;
			s1 = peg$c11();
		}
		s0 = s1;

		return s0;
	}

	function peg$parsequeryType() {
		var s0, s1, s2, s3;

		s0 = peg$currPos;
		if (input.charCodeAt(peg$currPos) === 91) {
			s1 = peg$c12;
			peg$currPos++;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c13);
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_queryType();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 93) {
					s3 = peg$c14;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c15);
					}
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c16(s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parse_queryType() {
		var s0;

		if (input.substr(peg$currPos, 4) === peg$c17) {
			s0 = peg$c17;
			peg$currPos += 4;
		} else {
			s0 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c18);
			}
		}
		if (s0 === peg$FAILED) {
			if (input.substr(peg$currPos, 4) === peg$c19) {
				s0 = peg$c19;
				peg$currPos += 4;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c20);
				}
			}
			if (s0 === peg$FAILED) {
				if (input.substr(peg$currPos, 8) === peg$c21) {
					s0 = peg$c21;
					peg$currPos += 8;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c22);
					}
				}
			}
		}

		return s0;
	}

	function peg$parsequeryOptions() {
		var s0, s1, s2, s3;

		peg$silentFails++;
		s0 = peg$currPos;
		if (input.charCodeAt(peg$currPos) === 40) {
			s1 = peg$c24;
			peg$currPos++;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c25);
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_queryOptions();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 41) {
					s3 = peg$c26;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c27);
					}
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c28(s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		peg$silentFails--;
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c23);
			}
		}

		return s0;
	}

	function peg$parse_queryOptions() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		s1 = peg$parsequeryOption();
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 44) {
					s3 = peg$c29;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c30);
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						s5 = peg$parse_queryOptions();
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c31(s1, s5);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parsequeryOption();
		}

		return s0;
	}

	function peg$parsequeryOption() {
		var s0, s1;

		s0 = peg$currPos;
		s1 = peg$parsenodeType();
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0;
			s1 = peg$c32(s1);
		}
		s0 = s1;
		if (s0 === peg$FAILED) {
			s0 = peg$parseoption();
		}

		return s0;
	}

	function peg$parseoptions() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		s1 = peg$parseoption();
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 44) {
					s3 = peg$c29;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c30);
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						s5 = peg$parseoptions();
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c33(s1, s5);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parseoption();
		}

		return s0;
	}

	function peg$parseoption() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		s1 = peg$parsename();
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 61) {
					s3 = peg$c34;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c35);
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						s5 = peg$parseprimitive();
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c36(s1, s5);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			s1 = peg$parsename();
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c37(s1);
			}
			s0 = s1;
		}

		return s0;
	}

	function peg$parsenodeType() {
		var s0, s1, s2, s3;

		s0 = peg$currPos;
		if (input.charCodeAt(peg$currPos) === 34) {
			s1 = peg$c38;
			peg$currPos++;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c39);
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parsenodeType();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 34) {
					s3 = peg$c38;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c39);
					}
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c40(s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 39) {
				s1 = peg$c41;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c42);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parsenodeType();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 39) {
						s3 = peg$c41;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c42);
						}
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c40(s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			if (s0 === peg$FAILED) {
				if (input.substr(peg$currPos, 8) === peg$c43) {
					s0 = peg$c43;
					peg$currPos += 8;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c44);
					}
				}
				if (s0 === peg$FAILED) {
					if (input.substr(peg$currPos, 10) === peg$c45) {
						s0 = peg$c45;
						peg$currPos += 10;
					} else {
						s0 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c46);
						}
					}
					if (s0 === peg$FAILED) {
						if (input.substr(peg$currPos, 6) === peg$c47) {
							s0 = peg$c47;
							peg$currPos += 6;
						} else {
							s0 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c48);
							}
						}
						if (s0 === peg$FAILED) {
							if (input.substr(peg$currPos, 3) === peg$c49) {
								s0 = peg$c49;
								peg$currPos += 3;
							} else {
								s0 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c50);
								}
							}
							if (s0 === peg$FAILED) {
								if (input.substr(peg$currPos, 6) === peg$c51) {
									s0 = peg$c51;
									peg$currPos += 6;
								} else {
									s0 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c52);
									}
								}
								if (s0 === peg$FAILED) {
									s0 = peg$currPos;
									if (input.substr(peg$currPos, 8) === peg$c53) {
										s1 = peg$c53;
										peg$currPos += 8;
									} else {
										s1 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c54);
										}
									}
									if (s1 !== peg$FAILED) {
										peg$savedPos = s0;
										s1 = peg$c55();
									}
									s0 = s1;
								}
							}
						}
					}
				}
			}
		}

		return s0;
	}

	function peg$parsequeryBody() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		if (input.charCodeAt(peg$currPos) === 123) {
			s1 = peg$c56;
			peg$currPos++;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c57);
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				s3 = peg$parsekeyValueOrRefPairs();
				if (s3 === peg$FAILED) {
					s3 = null;
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 125) {
							s5 = peg$c58;
							peg$currPos++;
						} else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c59);
							}
						}
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c60(s3);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parsekeyValueOrRefPairs() {
		var s0, s1, s2, s3, s4, s5, s6, s7;

		s0 = peg$currPos;
		s1 = peg$parse_();
		if (s1 !== peg$FAILED) {
			s2 = peg$parsekeyValueOrRefPair();
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_();
				if (s3 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 44) {
						s4 = peg$c29;
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c30);
						}
					}
					if (s4 !== peg$FAILED) {
						s5 = peg$parse_();
						if (s5 !== peg$FAILED) {
							s6 = peg$parsekeyValueOrRefPairs();
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_();
								if (s7 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c61(s2, s6);
									s0 = s1;
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			s1 = peg$parsekeyValueOrRefPair();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 44) {
						s3 = peg$c29;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c30);
						}
					}
					if (s3 === peg$FAILED) {
						s3 = null;
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c62(s1);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		}

		return s0;
	}

	function peg$parsekeyValuePairs() {
		var s0, s1, s2, s3, s4, s5, s6, s7;

		s0 = peg$currPos;
		s1 = peg$parse_();
		if (s1 !== peg$FAILED) {
			s2 = peg$parsekeyValuePair();
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_();
				if (s3 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 44) {
						s4 = peg$c29;
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c30);
						}
					}
					if (s4 !== peg$FAILED) {
						s5 = peg$parse_();
						if (s5 !== peg$FAILED) {
							s6 = peg$parsekeyValuePairs();
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_();
								if (s7 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c61(s2, s6);
									s0 = s1;
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			s1 = peg$parsekeyValuePair();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 44) {
						s3 = peg$c29;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c30);
						}
					}
					if (s3 === peg$FAILED) {
						s3 = null;
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c63(s1);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		}

		return s0;
	}

	function peg$parsekeyValueOrRefPair() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		s1 = peg$parsename();
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 58) {
					s3 = peg$c64;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c65);
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						s5 = peg$parsevalueOrRef();
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c36(s1, s5);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parsekeyValuePair() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		s1 = peg$parsename();
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 58) {
					s3 = peg$c64;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c65);
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						s5 = peg$parsevalue();
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c36(s1, s5);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parsename() {
		var s0, s1, s2;

		s0 = peg$parsestring();
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			s1 = [];
			if (peg$c66.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c67);
				}
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (peg$c66.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c67);
						}
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c68(s1);
			}
			s0 = s1;
		}

		return s0;
	}

	function peg$parsevalueOrRef() {
		var s0;

		s0 = peg$parsevalue();
		if (s0 === peg$FAILED) {
			s0 = peg$parsevalueOrRefTuple();
			if (s0 === peg$FAILED) {
				s0 = peg$parseref();
			}
		}

		return s0;
	}

	function peg$parsevalueOrRefs() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		s1 = peg$parsevalueOrRef();
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 44) {
					s3 = peg$c29;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c30);
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						s5 = peg$parsevalueOrRefs();
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c69(s1, s5);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			s1 = peg$parsevalueOrRef();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 44) {
						s3 = peg$c29;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c30);
						}
					}
					if (s3 === peg$FAILED) {
						s3 = null;
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c70(s1);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		}

		return s0;
	}

	function peg$parsevalueOrRefTuple() {
		var s0, s1, s2, s3, s4, s5, s6, s7, s8;

		s0 = peg$currPos;
		if (input.charCodeAt(peg$currPos) === 40) {
			s1 = peg$c24;
			peg$currPos++;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c25);
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				s3 = peg$parsevalueOrRef();
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 44) {
							s5 = peg$c29;
							peg$currPos++;
						} else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c30);
							}
						}
						if (s5 !== peg$FAILED) {
							s6 = peg$parse_();
							if (s6 !== peg$FAILED) {
								s7 = peg$parsevalueOrRef();
								if (s7 !== peg$FAILED) {
									if (input.charCodeAt(peg$currPos) === 41) {
										s8 = peg$c26;
										peg$currPos++;
									} else {
										s8 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c27);
										}
									}
									if (s8 !== peg$FAILED) {
										peg$savedPos = s0;
										s1 = peg$c71(s3, s7);
										s0 = s1;
									} else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parsevalue() {
		var s0, s1;

		s0 = peg$currPos;
		s1 = peg$parseobject();
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0;
			s1 = peg$c72(s1);
		}
		s0 = s1;
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			s1 = peg$parsearray();
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c73(s1);
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				s0 = peg$parseprimitive();
			}
		}

		return s0;
	}

	function peg$parsevalues() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		s1 = peg$parsevalue();
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 44) {
					s3 = peg$c29;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c30);
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						s5 = peg$parsevalues();
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c69(s1, s5);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			s1 = peg$parsevalue();
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c70(s1);
			}
			s0 = s1;
		}

		return s0;
	}

	function peg$parseref() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		if (input.substr(peg$currPos, 5) === peg$c74) {
			s1 = peg$c74;
			peg$currPos += 5;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c75);
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				s3 = peg$parseoptions();
				if (s3 === peg$FAILED) {
					s3 = null;
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 41) {
							s5 = peg$c26;
							peg$currPos++;
						} else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c27);
							}
						}
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c76(s3);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parseobject() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		if (input.charCodeAt(peg$currPos) === 123) {
			s1 = peg$c56;
			peg$currPos++;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c57);
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				s3 = peg$parsekeyValuePairs();
				if (s3 === peg$FAILED) {
					s3 = null;
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 125) {
							s5 = peg$c58;
							peg$currPos++;
						} else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c59);
							}
						}
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c77(s3);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parsearray() {
		var s0, s1, s2, s3, s4, s5;

		s0 = peg$currPos;
		if (input.charCodeAt(peg$currPos) === 91) {
			s1 = peg$c12;
			peg$currPos++;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c13);
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_();
			if (s2 !== peg$FAILED) {
				s3 = peg$parsevalueOrRefs();
				if (s3 === peg$FAILED) {
					s3 = null;
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_();
					if (s4 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 93) {
							s5 = peg$c14;
							peg$currPos++;
						} else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c15);
							}
						}
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c78(s3);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}

		return s0;
	}

	function peg$parseprimitive() {
		var s0, s1;

		s0 = peg$currPos;
		s1 = peg$parsenumber();
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0;
			s1 = peg$c79(s1);
		}
		s0 = s1;
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			s1 = peg$parsestring();
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c80(s1);
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				s1 = peg$parseboolean();
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c81(s1);
				}
				s0 = s1;
			}
		}

		return s0;
	}

	function peg$parsestring() {
		var s0, s1, s2, s3;

		peg$silentFails++;
		s0 = peg$currPos;
		if (input.charCodeAt(peg$currPos) === 34) {
			s1 = peg$c38;
			peg$currPos++;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c39);
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = [];
			s3 = peg$parsedoubleStringCharacter();
			while (s3 !== peg$FAILED) {
				s2.push(s3);
				s3 = peg$parsedoubleStringCharacter();
			}
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 34) {
					s3 = peg$c38;
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c39);
					}
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c68(s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 39) {
				s1 = peg$c41;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c42);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = [];
				s3 = peg$parsesingleStringCharacter();
				while (s3 !== peg$FAILED) {
					s2.push(s3);
					s3 = peg$parsesingleStringCharacter();
				}
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 39) {
						s3 = peg$c41;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c42);
						}
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c68(s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		}
		peg$silentFails--;
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c82);
			}
		}

		return s0;
	}

	function peg$parsedoubleStringCharacter() {
		var s0, s1, s2;

		s0 = peg$currPos;
		s1 = peg$currPos;
		peg$silentFails++;
		if (input.charCodeAt(peg$currPos) === 34) {
			s2 = peg$c38;
			peg$currPos++;
		} else {
			s2 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c39);
			}
		}
		if (s2 === peg$FAILED) {
			if (input.charCodeAt(peg$currPos) === 92) {
				s2 = peg$c83;
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c84);
				}
			}
		}
		peg$silentFails--;
		if (s2 === peg$FAILED) {
			s1 = void 0;
		} else {
			peg$currPos = s1;
			s1 = peg$FAILED;
		}
		if (s1 !== peg$FAILED) {
			if (input.length > peg$currPos) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c85);
				}
			}
			if (s2 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c86(s2);
				s0 = s1;
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 92) {
				s1 = peg$c83;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c84);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parseEscapeSequence();
				if (s2 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c87(s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		}

		return s0;
	}

	function peg$parsesingleStringCharacter() {
		var s0, s1, s2;

		s0 = peg$currPos;
		s1 = peg$currPos;
		peg$silentFails++;
		if (input.charCodeAt(peg$currPos) === 39) {
			s2 = peg$c41;
			peg$currPos++;
		} else {
			s2 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c42);
			}
		}
		if (s2 === peg$FAILED) {
			if (input.charCodeAt(peg$currPos) === 92) {
				s2 = peg$c83;
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c84);
				}
			}
		}
		peg$silentFails--;
		if (s2 === peg$FAILED) {
			s1 = void 0;
		} else {
			peg$currPos = s1;
			s1 = peg$FAILED;
		}
		if (s1 !== peg$FAILED) {
			if (input.length > peg$currPos) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c85);
				}
			}
			if (s2 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c86(s2);
				s0 = s1;
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		} else {
			peg$currPos = s0;
			s0 = peg$FAILED;
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 92) {
				s1 = peg$c83;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c84);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parseEscapeSequence();
				if (s2 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c87(s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
		}

		return s0;
	}

	function peg$parseEscapeSequence() {
		var s0, s1;

		if (input.charCodeAt(peg$currPos) === 39) {
			s0 = peg$c41;
			peg$currPos++;
		} else {
			s0 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c42);
			}
		}
		if (s0 === peg$FAILED) {
			if (input.charCodeAt(peg$currPos) === 34) {
				s0 = peg$c38;
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c39);
				}
			}
			if (s0 === peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 92) {
					s0 = peg$c83;
					peg$currPos++;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c84);
					}
				}
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					if (input.charCodeAt(peg$currPos) === 98) {
						s1 = peg$c88;
						peg$currPos++;
					} else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c89);
						}
					}
					if (s1 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c90();
					}
					s0 = s1;
					if (s0 === peg$FAILED) {
						s0 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 102) {
							s1 = peg$c91;
							peg$currPos++;
						} else {
							s1 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c92);
							}
						}
						if (s1 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c93();
						}
						s0 = s1;
						if (s0 === peg$FAILED) {
							s0 = peg$currPos;
							if (input.charCodeAt(peg$currPos) === 110) {
								s1 = peg$c94;
								peg$currPos++;
							} else {
								s1 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c95);
								}
							}
							if (s1 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c96();
							}
							s0 = s1;
							if (s0 === peg$FAILED) {
								s0 = peg$currPos;
								if (input.charCodeAt(peg$currPos) === 114) {
									s1 = peg$c97;
									peg$currPos++;
								} else {
									s1 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c98);
									}
								}
								if (s1 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c99();
								}
								s0 = s1;
								if (s0 === peg$FAILED) {
									s0 = peg$currPos;
									if (input.charCodeAt(peg$currPos) === 116) {
										s1 = peg$c100;
										peg$currPos++;
									} else {
										s1 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c101);
										}
									}
									if (s1 !== peg$FAILED) {
										peg$savedPos = s0;
										s1 = peg$c102();
									}
									s0 = s1;
									if (s0 === peg$FAILED) {
										s0 = peg$currPos;
										if (input.charCodeAt(peg$currPos) === 118) {
											s1 = peg$c103;
											peg$currPos++;
										} else {
											s1 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$c104);
											}
										}
										if (s1 !== peg$FAILED) {
											peg$savedPos = s0;
											s1 = peg$c105();
										}
										s0 = s1;
									}
								}
							}
						}
					}
				}
			}
		}

		return s0;
	}

	function peg$parsenumber() {
		var s0, s1, s2;

		peg$silentFails++;
		s0 = peg$currPos;
		s1 = [];
		if (peg$c107.test(input.charAt(peg$currPos))) {
			s2 = input.charAt(peg$currPos);
			peg$currPos++;
		} else {
			s2 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c108);
			}
		}
		if (s2 !== peg$FAILED) {
			while (s2 !== peg$FAILED) {
				s1.push(s2);
				if (peg$c107.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c108);
					}
				}
			}
		} else {
			s1 = peg$FAILED;
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0;
			s1 = peg$c109(s1);
		}
		s0 = s1;
		peg$silentFails--;
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c106);
			}
		}

		return s0;
	}

	function peg$parseboolean() {
		var s0, s1;

		peg$silentFails++;
		s0 = peg$currPos;
		if (input.substr(peg$currPos, 4) === peg$c111) {
			s1 = peg$c111;
			peg$currPos += 4;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c112);
			}
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0;
			s1 = peg$c113();
		}
		s0 = s1;
		if (s0 === peg$FAILED) {
			s0 = peg$currPos;
			if (input.substr(peg$currPos, 5) === peg$c114) {
				s1 = peg$c114;
				peg$currPos += 5;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c115);
				}
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c116();
			}
			s0 = s1;
		}
		peg$silentFails--;
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c110);
			}
		}

		return s0;
	}

	function peg$parse_() {
		var s0, s1;

		peg$silentFails++;
		s0 = [];
		if (peg$c118.test(input.charAt(peg$currPos))) {
			s1 = input.charAt(peg$currPos);
			peg$currPos++;
		} else {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c119);
			}
		}
		while (s1 !== peg$FAILED) {
			s0.push(s1);
			if (peg$c118.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c119);
				}
			}
		}
		peg$silentFails--;
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED;
			if (peg$silentFails === 0) {
				peg$fail(peg$c117);
			}
		}

		return s0;
	}

	function makeString(o) {
		return o.join('');
	}
	function makeInteger(o) {
		return parseInt(makeString(o), 10);
	}
	function makeFloat(o) {
		return parseFloat(makeString(o));
	}
	function makeObject(name, value) {
		const o = {};
		o[name] = value;
		return o;
	}

	peg$result = peg$startRuleFunction();

	if (peg$result !== peg$FAILED && peg$currPos === input.length) {
		return peg$result;
	} else {
		if (peg$result !== peg$FAILED && peg$currPos < input.length) {
			peg$fail(peg$endExpectation());
		}

		throw peg$buildStructuredError(
			peg$maxFailExpected,
			peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
			peg$maxFailPos < input.length
				? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
				: peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
		);
	}
}

module.exports = {
	SyntaxError: peg$SyntaxError,
	parse: peg$parse,
};
